---
import { getCollection, getEntry } from 'astro:content'
import { renderMarkdown } from '@astrojs/markdown-remark'
import ItemCard from '@components/cards/ItemCard.astro'
import ItemCardSmall from '@components/cards/ItemCardSmall.astro'
import ItemCardFlex from '@components/cards/ItemCardFlex.astro'
import Intersecting from '@components/common/Intersecting.vue'
import { slugify, getGridImageSizes } from '@util/helpers'

const base_url = import.meta.env.SHOP_SLUG
const { title, name, container, template, content, categories } = Astro.props
const { data } = await getEntry('config', 'shop')

const render = async (content) => {
	return await renderMarkdown(content, {}).then((r) => r.code)
}

const posts = (await getCollection('product')).sort(
	(a, b) => a.data.date.valueOf() - b.data.date.valueOf()
)

const allCategories = posts.map((post) => post.data.category).filter((post) => !!post)
const allCategoriesFlat = [...new Set(allCategories.flat(1))]
const productCategories = data?.product_categories ? data.product_categories : []

let blockCategories

if (categories && categories.length > 0) {
	blockCategories = categories
		.map((cat) => productCategories.filter((category) => category.name === cat).pop())
		.filter((val) => !!val)
} else {
	blockCategories = productCategories.filter((category) =>
		allCategoriesFlat.includes(category.name)
	)
}

const sizes = getGridImageSizes(container)
---

<Intersecting client:visible className="w-full">
	<div class={`recent-blogs grid gap-8 fade-up container-${container || 'md'} `}>
		{
			template === 'grid' && (
				<>
					<h2 class="title-sm" id={slugify(title)}>
						{title}
					</h2>
					{content && <div class="richtext" set:html={render(content)} />}
					<div class={`auto-grid-${container || 'md'} gap-4`} data-pagefind-ignore="all">
						{blockCategories.map((post, index) => (
							<div style={`--animation-delay: ${(index + 1) * 150}ms`}>
								<ItemCard
									content={{
										data: {
											...post,
											intro: post.description
										},
										slug: `category/${slugify(post.name)}`
									}}
									{base_url}
									{sizes}
								/>
							</div>
						))}
					</div>
				</>
			)
		}

		{
			template === 'list' && (
				<div class="grid gap-14 md:grid-cols-2">
					<div>
						<div class="sticky top-8 grid gap-4">
							<h2 class="title-sm" id={slugify(title)}>
								{title}
							</h2>
							{content && <div class="richtext" set:html={render(content)} />}
						</div>
					</div>
					<ul class={`bloglist grid gap-4`} data-pagefind-ignore="all">
						{blockCategories.map((post, index) => (
							<li style={`--animation-delay: ${(index + 1) * 150}ms`}>
								<ItemCardSmall
									content={{
										data: {
											...post,
											intro: post.description
										},
										slug: `category/${slugify(post.name)}`
									}}
									{base_url}
								/>
							</li>
						))}
					</ul>
				</div>
			)
		}

		{
			template === 'flex' && (
				<>
					<h2 class="title-sm" id={slugify(title)}>
						{title}
					</h2>
					{content && <div class="richtext" set:html={render(content)} />}
					<div
						class={`flex-grid flex flex-wrap gap-4 flex-${container || 'md'} gap-4`}
						data-pagefind-ignore="all"
					>
						{blockCategories.map((post, index) => (
							<div style={`--animation-delay: ${(index + 1) * 150}ms`} class="flex-card">
								<ItemCardFlex
									content={{
										data: {
											...post,
											intro: post.description
										},
										slug: `category/${slugify(post.name)}`
									}}
									{base_url}
									{sizes}
								/>
							</div>
						))}
					</div>
				</>
			)
		}
	</div>
</Intersecting>

<style lang="postcss">
.recent-blogs ul.bloglist {
		width: calc(100% + var(--container-spacing));
		margin-left: calc(var(--spacing) * -1);
		@screen md {  
			width: 100%;
			margin-left: 0;                      
		}
	}
    .flex-grid {
        @apply flex flex-wrap justify-stretch gap-4;
        .flex-card {
            @apply flex-1;
            min-width: min(100vw - var(--container-spacing),14rem);
        }
    }
</style>
